name: Snell Update

on:
  schedule:
    - cron: '0 0 * * *'  # 每天午夜运行
  workflow_dispatch:  # 保留手动触发选项

jobs:
  check_and_update_snell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: 检测下载并补全文件
        run: |
          import requests
          from bs4 import BeautifulSoup
          import re
          import os

          def get_all_versions():
              url = "https://kb.nssurge.com/surge-knowledge-base/zh/release-notes/snell"
              response = requests.get(url)
              soup = BeautifulSoup(response.text, 'html.parser')
              
              # 在页面内容中查找所有版本链接
              text = soup.get_text()
              
              # 查找所有版本模式，包括 beta 版本
              version_pattern = r'snell-server-v(\d+\.\d+\.\d+(?:b\d+)?)'
              matches = re.findall(version_pattern, text)
              
              if not matches:
                  print("No versions found in the page")
                  print("Page content preview:")
                  print(text[:1000])  # 打印前1000个字符用于调试
                  return []
              
              # 去重并返回所有版本
              unique_versions = list(set(matches))
              print(f"Found versions: {unique_versions}")
              return unique_versions

          def download_file(url, path):
              try:
                  response = requests.get(url, timeout=30)
                  response.raise_for_status()
                  with open(path, 'wb') as f:
                      f.write(response.content)
                  return True
              except Exception as e:
                  print(f"Failed to download {url}: {e}")
                  return False

          def process_version(version):
              print(f"\n=== Processing version {version} ===")
              version_dir = f'Snell/source/v{version}'

              if not os.path.exists(version_dir):
                  os.makedirs(version_dir)
                  print(f'Created new directory: {version_dir}')
              else:
                  print(f'Directory already exists: {version_dir}')

              architectures = ['amd64', 'i386', 'aarch64', 'armv7l']
              success_count = 0
              
              for arch in architectures:
                  filename = f'snell-server-v{version}-linux-{arch}.zip'
                  url = f'https://dl.nssurge.com/snell/{filename}'
                  path = os.path.join(version_dir, filename)
                  
                  if not os.path.exists(path):
                      if download_file(url, path):
                          print(f'Downloaded {filename}')
                          success_count += 1
                      else:
                          print(f'Failed to download {filename}')
                  else:
                      print(f'{filename} already exists')
                      success_count += 1

              print(f'Version {version}: Successfully processed {success_count}/{len(architectures)} files')
              return success_count

          # 获取所有版本
          all_versions = get_all_versions()
          if not all_versions:
              print("Could not find any versions")
              exit(1)
              
          # 对版本进行排序以便有序处理
          def version_key(version):
              # 分离版本号和 beta 标识
              if 'b' in version:
                  base_version, beta_num = version.split('b')
                  return (list(map(int, base_version.split('.'))), 1, int(beta_num))
              else:
                  return (list(map(int, version.split('.'))), 0, 0)
          
          sorted_versions = sorted(all_versions, key=version_key)
          print(f"\nProcessing {len(sorted_versions)} versions in order: {sorted_versions}")
          
          # 处理每个版本
          total_success = 0
          total_files = 0
          
          for version in sorted_versions:
              success_count = process_version(version)
              total_success += success_count
              total_files += 4  # 每个版本4个架构
          
          print(f"\n=== Summary ===")
          print(f"Processed {len(sorted_versions)} versions")
          print(f"Successfully downloaded/verified {total_success}/{total_files} files")
          print("All versions processed!")
        shell: python

      - name: Check and Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Force add changes
        run: git add Snell/source || true

      - name: Commit and push changes if needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! git diff-index --quiet HEAD; then
            git commit -m "Auto Update Snell - All Versions"
            git push origin HEAD:main
          else
            echo "No changes to commit"
          fi