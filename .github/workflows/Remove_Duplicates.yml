name: Remove Duplicate Entries

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 * * * *"

jobs:
  merge_domains:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Log.list file
        run: |
          curl -sL https://raw.githubusercontent.com/EAlyce/conf/main/Rule/Log.list > Log.tmp

      - name: Remove duplicate entries
        run: |
          awk '!seen[$0]++' Log.tmp > Log.list
          rm Log.tmp

      - name: Check for changes
        id: git-check
        run: |
          git diff --quiet || echo "Files have changed"

      - name: Set Git configuration and commit changes
        if: steps.git-check.outputs.stdout != 'Files have changed'
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { context, github } = require('@actions/github');
            const { owner, repo } = context.repo;
            
            // Set git configuration
            await exec('git', ['config', '--global', 'user.email', 'msosjaahwwj@gmail.com']);
            await exec('git', ['config', '--global', 'user.name', 'Github Action']);
            
            // Add and commit changes
            await exec('git', ['add', 'Rule/Log.list']);
            await exec('git', ['commit', '-m', 'Remove Duplicate Entries']);
            
            // Push changes
            await exec('git', ['pull', 'origin', 'main', '--ff-only']);
            await exec('git', ['checkout', '--theirs', '.']);
            await exec('git', ['add', '.']);
            await exec('git', ['commit', '-m', 'Auto-resolve merge conflict']);
            await exec('git', ['push', 'origin', 'main']);

            function exec(command, args) {
              return new Promise((resolve, reject) => {
                const { exec } = require('child_process');
                exec(command + ' ' + args.join(' '), (error, stdout, stderr) => {
                  if (error) {
                    console.error(`exec error: ${error}`);
                    reject(error);
                    return;
                  }
                  console.log(stdout);
                  resolve(stdout.trim());
                });
              });
            }