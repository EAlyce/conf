name: Daily Snell Version Checker and Updater

on:
  schedule:
    - cron: '0 0 * * *'  # 每天午夜运行
  workflow_dispatch:  # 保留手动触发选项

jobs:
  check_and_update_snell:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4

      - name: 检测下载并补全文件
        run: |
          import requests
          from bs4 import BeautifulSoup
          import re
          import os

          def get_latest_version():
              url = "https://manual.nssurge.com/others/snell.html"
              response = requests.get(url)
              soup = BeautifulSoup(response.text, 'html.parser')
              links = soup.find_all('a', href=re.compile(r'snell-server-v[\d\.]+'))
              versions = set(re.search(r'v([\d\.]+)', link['href']).group(1) for link in links)
              return max(versions, key=lambda v: list(map(int, v.split('.'))))

          def download_file(url, path):
              response = requests.get(url)
              with open(path, 'wb') as f:
                  f.write(response.content)

          latest_version = get_latest_version()
          version_dir = f'Snell/source/v{latest_version}'

          if not os.path.exists(version_dir):
              os.makedirs(version_dir)
              print(f'Created new directory: {version_dir}')
          
          architectures = ['amd64', 'i386', 'aarch64', 'armv7l']
          for arch in architectures:
              filename = f'snell-server-v{latest_version}-linux-{arch}.zip'
              url = f'https://dl.nssurge.com/snell/{filename}'
              path = os.path.join(version_dir, filename)
              if not os.path.exists(path):
                  download_file(url, path)
                  print(f'Downloaded {filename}')
              else:
                  print(f'{filename} already exists')

          # 检查文件夹是否完整，如果不完整则补全
          files_in_dir = os.listdir(version_dir)
          expected_files = [f'snell-server-v{latest_version}-linux-{arch}.zip' for arch in architectures]
          missing_files = set(expected_files) - set(files_in_dir)

          if missing_files:
              print(f'Found missing files: {missing_files}')
              for missing_file in missing_files:
                  url = f'https://dl.nssurge.com/snell/{missing_file}'
                  path = os.path.join(version_dir, missing_file)
                  download_file(url, path)
                  print(f'Downloaded missing file: {missing_file}')
          else:
              print('All files are present and up to date.')

        shell: python

      - name: Check and Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
      - name: Force add changes
        run: git add Snell/source || true

      - name: Commit and push changes if needed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! git diff-index --quiet HEAD; then
            git commit -m "Auto Update Snell: Complete missing files"
            git push origin HEAD:main
          else
            echo "No changes to commit"
          fi
